use std::fmt;

#[derive(Debug, PartialEq, Clone)]
pub enum Cut {
    C0,
    C1,
    C2,
    C3,
    C4,
    C5,
    C6,
    C7,
    C8,
    C9,
    C10,
    C11,
    C12,
    C13,
    C14,
    C15,
    C16,
    C17,
    C18,
    C19,
    C20,
    C21,
    C22,
    C23,
    C24,
    C25,
    C26,
    C27,
    C28,
    C29,
    C30,
    C31,
    C32,
    C33,
    C34,
    C35,
    C36,
    C37,
    C38,
    C39,
    C40,
    C41,
    C42,
    C43,
    C44,
    C45,
    C46,
    C47,
    C48,
    C49,
    C50,
    C51,
    C52,
    C53,
    C54,
    C55,
    C56,
    C57,
    C58,
    C59,
    C60,
    C61,
    C62,
    C63,
    C64,
    C65,
    C66,
    C67,
    C68,
    C69,
    C70,
    C71,
    C72,
    C73,
    C74,
    C75,
    C76,
    C77,
    C78,
    C79,
    C80,
    C81,
    C82,
    C83,
    C84,
    C85,
    C86,
    C87,
    C88,
    C89,
    C90,
    C91,
    C92,
    C93,
    C94,
    C95,
    C96,
    C97,
    C98,
    C99,
}

impl Cut {
    pub fn new(value: u8) -> Option<Self> {
        Some(match value {
            0 => Self::C0,
            1 => Self::C1,
            2 => Self::C2,
            3 => Self::C3,
            4 => Self::C4,
            5 => Self::C5,
            6 => Self::C6,
            7 => Self::C7,
            8 => Self::C8,
            9 => Self::C9,
            10 => Self::C10,
            11 => Self::C11,
            12 => Self::C12,
            13 => Self::C13,
            14 => Self::C14,
            15 => Self::C15,
            16 => Self::C16,
            17 => Self::C17,
            18 => Self::C18,
            19 => Self::C19,
            20 => Self::C20,
            21 => Self::C21,
            22 => Self::C22,
            23 => Self::C23,
            24 => Self::C24,
            25 => Self::C25,
            26 => Self::C26,
            27 => Self::C27,
            28 => Self::C28,
            29 => Self::C29,
            30 => Self::C30,
            31 => Self::C31,
            32 => Self::C32,
            33 => Self::C33,
            34 => Self::C34,
            35 => Self::C35,
            36 => Self::C36,
            37 => Self::C37,
            38 => Self::C38,
            39 => Self::C39,
            40 => Self::C40,
            41 => Self::C41,
            42 => Self::C42,
            43 => Self::C43,
            44 => Self::C44,
            45 => Self::C45,
            46 => Self::C46,
            47 => Self::C47,
            48 => Self::C48,
            49 => Self::C49,
            50 => Self::C50,
            51 => Self::C51,
            52 => Self::C52,
            53 => Self::C53,
            54 => Self::C54,
            55 => Self::C55,
            56 => Self::C56,
            57 => Self::C57,
            58 => Self::C58,
            59 => Self::C59,
            60 => Self::C60,
            61 => Self::C61,
            62 => Self::C62,
            63 => Self::C63,
            64 => Self::C64,
            65 => Self::C65,
            66 => Self::C66,
            67 => Self::C67,
            68 => Self::C68,
            69 => Self::C69,
            70 => Self::C70,
            71 => Self::C71,
            72 => Self::C72,
            73 => Self::C74,
            74 => Self::C74,
            75 => Self::C75,
            76 => Self::C76,
            77 => Self::C77,
            78 => Self::C78,
            79 => Self::C79,
            80 => Self::C80,
            81 => Self::C81,
            82 => Self::C82,
            83 => Self::C83,
            84 => Self::C84,
            85 => Self::C85,
            86 => Self::C86,
            87 => Self::C87,
            88 => Self::C88,
            89 => Self::C89,
            90 => Self::C90,
            91 => Self::C91,
            92 => Self::C92,
            93 => Self::C93,
            94 => Self::C94,
            95 => Self::C95,
            96 => Self::C96,
            97 => Self::C97,
            98 => Self::C98,
            99 => Self::C99,
            _ => return None,
        })
    }
}

impl fmt::Display for Cut {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                Self::C0 => "0",
                Self::C1 => "1",
                Self::C2 => "2",
                Self::C3 => "3",
                Self::C4 => "4",
                Self::C5 => "5",
                Self::C6 => "6",
                Self::C7 => "7",
                Self::C8 => "8",
                Self::C9 => "9",
                Self::C10 => "%10",
                Self::C11 => "%11",
                Self::C12 => "%12",
                Self::C13 => "%13",
                Self::C14 => "%14",
                Self::C15 => "%15",
                Self::C16 => "%16",
                Self::C17 => "%17",
                Self::C18 => "%18",
                Self::C19 => "%19",
                Self::C20 => "%20",
                Self::C21 => "%21",
                Self::C22 => "%22",
                Self::C23 => "%23",
                Self::C24 => "%24",
                Self::C25 => "%25",
                Self::C26 => "%26",
                Self::C27 => "%27",
                Self::C28 => "%28",
                Self::C29 => "%29",
                Self::C30 => "%30",
                Self::C31 => "%31",
                Self::C32 => "%32",
                Self::C33 => "%33",
                Self::C34 => "%34",
                Self::C35 => "%35",
                Self::C36 => "%36",
                Self::C37 => "%37",
                Self::C38 => "%38",
                Self::C39 => "%39",
                Self::C40 => "%40",
                Self::C41 => "%41",
                Self::C42 => "%42",
                Self::C43 => "%43",
                Self::C44 => "%44",
                Self::C45 => "%45",
                Self::C46 => "%46",
                Self::C47 => "%47",
                Self::C48 => "%48",
                Self::C49 => "%49",
                Self::C50 => "%50",
                Self::C51 => "%51",
                Self::C52 => "%52",
                Self::C53 => "%53",
                Self::C54 => "%54",
                Self::C55 => "%55",
                Self::C56 => "%56",
                Self::C57 => "%57",
                Self::C58 => "%58",
                Self::C59 => "%59",
                Self::C60 => "%60",
                Self::C61 => "%61",
                Self::C62 => "%62",
                Self::C63 => "%63",
                Self::C64 => "%64",
                Self::C65 => "%65",
                Self::C66 => "%66",
                Self::C67 => "%67",
                Self::C68 => "%68",
                Self::C69 => "%69",
                Self::C70 => "%70",
                Self::C71 => "%71",
                Self::C72 => "%72",
                Self::C73 => "%73",
                Self::C74 => "%74",
                Self::C75 => "%75",
                Self::C76 => "%76",
                Self::C77 => "%77",
                Self::C78 => "%78",
                Self::C79 => "%79",
                Self::C80 => "%80",
                Self::C81 => "%81",
                Self::C82 => "%82",
                Self::C83 => "%83",
                Self::C84 => "%84",
                Self::C85 => "%85",
                Self::C86 => "%86",
                Self::C87 => "%87",
                Self::C88 => "%88",
                Self::C89 => "%89",
                Self::C90 => "%90",
                Self::C91 => "%91",
                Self::C92 => "%92",
                Self::C93 => "%93",
                Self::C94 => "%94",
                Self::C95 => "%95",
                Self::C96 => "%96",
                Self::C97 => "%97",
                Self::C98 => "%98",
                Self::C99 => "%99",
            }
        )
    }
}
